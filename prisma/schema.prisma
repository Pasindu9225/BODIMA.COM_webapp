// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMs for custom types
enum Role {
  STUDENT
  PROVIDER
  ADMIN
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
}

// User Model: Core user account information
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Required for Credentials provider
  role          Role      @default(STUDENT)
  status        UserStatus @default(APPROVED)

  accounts Account[]
  sessions Session[]
  
  // Relations
  providerProfile Provider? // A user can have one provider profile
  listings        Listing[] // A provider can have multiple listings
  bookmarks       Bookmark[] // A student can have multiple bookmarks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Next-Auth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models

// Provider Model: Detailed profile for a boarding provider
model Provider {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])
  name      String // The business name, e.g., "Sunil Properties"
  phone     String
  address   String
  nic       String @unique
  isVerified Boolean @default(false) // Admin approved

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Listing Model: A single accommodation unit
model Listing {
  id          String        @id @default(cuid())
  title       String
  description String
  address     String
  city        String
  lat         Float
  lng         Float
  price       Float
  roomType    String // e.g., "Single", "Shared"
  status      ListingStatus @default(PENDING)
  
  providerId String
  provider   User   @relation(fields: [providerId], references: [id])

  amenities   ListingAmenity[]
  photos      Photo[]
  bookmarks   Bookmark[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Amenity Model: Features like Wi-Fi, A/C
model Amenity {
  id    String @id @default(cuid())
  name  String @unique
  icon  String // e.g., "wifi", "bath" (for icon library mapping)
  
  listings ListingAmenity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Join table for Listings and Amenities
model ListingAmenity {
  listingId String
  amenityId String
  listing   Listing @relation(fields: [listingId], references: [id])
  amenity   Amenity @relation(fields: [amenityId], references: [id])

  @@id([listingId, amenityId])
}

// Photo Model: Images for a listing
model Photo {
  id        String  @id @default(cuid())
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])
  url       String
  isCover   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Bookmark Model: A student's saved listing
model Bookmark {
  id        String  @id @default(cuid())
  userId    String
  listingId String
  user      User    @relation(fields: [userId], references: [id])
  listing   Listing @relation(fields: [listingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, listingId])
}
