// This block defines our database connection
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Loads from the .env file
}

// This tells Prisma how to generate its code
generator client {
  provider = "prisma-client-js"
}

// ---------------------------------------------
// ENUMS (Our custom types)
// ---------------------------------------------
enum Role {
  ADMIN
  PROVIDER
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ListingStatus {
  PENDING
  APPROVED
  REJECTED
  DEACTIVATED
}

enum Gender {
  MALE
  FEMALE
  ANY
}

// ---------------------------------------------
// AUTH MODELS (Required by Next-Auth)
// ---------------------------------------------

// This is our CUSTOM User model, merged with Next-Auth
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?      // We use this for our custom login
  accounts      Account[]
  sessions      Session[]

  // --- OUR CUSTOM FIELDS ---
  phone         String?
  address       String?
  role          Role         @default(PROVIDER)
  status        UserStatus   @default(PENDING)
  listings      Listing[]
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ---------------------------------------------
// OUR APPLICATION MODELS
// ---------------------------------------------

model University {
  id        String  @id @default(cuid())
  name      String  @unique
  latitude  Float
  longitude Float
}

model Listing {
  id            String        @id @default(cuid())
  title         String
  description   String        @db.Text
  address       String
  latitude      Float
  longitude     Float
  price         Decimal       @db.Decimal(10, 2)
  gender        Gender        @default(ANY)
  status        ListingStatus @default(PENDING)

  provider   User   @relation(fields: [providerId], references: [id])
  providerId String

  images    ListingImage[]
  amenities Amenity[]      @relation("AmenityToListing")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ListingImage {
  id        String  @id @default(cuid())
  url       String
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId String
}

model Amenity {
  id       String    @id @default(cuid())
  name     String    @unique
  icon     String?
  listings Listing[] @relation("AmenityToListing")
}